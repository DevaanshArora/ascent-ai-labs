# app/main.py

from fastapi import FastAPI, HTTPException, Response
from pydantic import BaseModel
from db import insert_policy_data, get_all_policies,get_policy_by_name,get_all_Policy_name
from openai_helper import generate_policy
from fastapi.middleware.cors import CORSMiddleware
import json
app = FastAPI()

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Allow your frontend's origin
    allow_credentials=True,
    allow_methods=["*"],  # Allow all HTTP methods
    allow_headers=["*"],  # Allow all headers
)

# Define Pydantic models
class PolicyRequest(BaseModel):
    organisationName: str
    additionalInfo: str
    organisationCategory: str 
    policyCategory: str 
    policyType: str 
    complianceStandard: str 
    location: str 
class PolicySearchRequest(BaseModel):
    policy_name: str 
    
class PolicyResponse(BaseModel):
    policy_text: str
    # id: int

@app.post("/generate-policy/")
async def generate_and_store_policy(request: PolicyRequest):
    print('coming here')
    # Generate policy using OpenAI API
    input_text = (
        f"Organisation Name: {request.organisationName}\n"
        f"Additional Info: {request.additionalInfo}\n"
        f"Category: {request.organisationCategory}\n"
        f"Policy Category: {request.policyCategory}\n"
        f"Policy Type: {request.policyType}\n"
        f"Compliance Standard: {request.complianceStandard}\n"
        f"Location: {request.location}"
    )
    print('coming here 1')
    policy = generate_policy(input_text)
    print('coming here 2')
    
    print(policy)
    if policy.startswith("An error occurred"):
        print('coming here 4')
        raise HTTPException(status_code=500, detail=policy)
        
    print('coming here 3')
    
    try:
        result = json.loads(policy)
    except json.JSONDecodeError:
        raise HTTPException(status_code=500, detail="Invalid JSON format generated by the model.")
    # return PolicyResponse(policy_text=policy)
    return result
    # Store the policy in PostgreSQL
    # policy_id = insert_policy_data(policy)

    # return PolicyResponse(policy_text=policy, id=policy_id)

@app.post("/store-policy/")
async def store_policy_in_db(policy_data: str, policy_name: str) -> dict:
    """
    Store the policy in the database.
    Args:
        policy_data: The policy text to be stored.
        policy_name: The name of the policy.
    Returns:
        A dictionary with the policy ID or error details.
    """
    try:
        # Assuming async database interaction
        policy_id = await insert_policy_data(policy_data, policy_name)
        return {"policy_id": policy_id, "message": "Policy stored successfully."}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/policies/")
async def get_policies():
    policies = get_all_policies()

    return policies
@app.get("/policies/name/")
async def get_policies_name():
    policies = get_all_Policy_name()
    print(policies)

    return policies

@app.post("/policies/search/")
async def search_policies(request: PolicySearchRequest):
    policy_name = request.policy_name
    policies = get_policy_by_name(policy_name)
    if not policies:
        raise HTTPException(status_code=404, detail="Policy not found")
    return policies


# # app/main.py

# from fastapi import FastAPI, HTTPException
# from pydantic import BaseModel
# from db import insert_policy_data, get_all_policies
# from openai_helper import generate_policy

# app = FastAPI()

# # Define Pydantic models
# class PolicyRequest(BaseModel):
#     input_text: str

# class PolicyResponse(BaseModel):
#     policy_text: str
#     # id: int

# @app.post("/generate-policy/", response_model=PolicyResponse)
# async def generate_and_store_policy(request: PolicyRequest):
#     # Generate policy using OpenAI API
#     policy = generate_policy(request.input_text)
    
#     print(policy)
#     if policy.startswith("An error occurred"):
#         raise HTTPException(status_code=500, detail=policy)

#     # Store the policy in PostgreSQL
#     # policy_id = insert_policy_data(policy)

#     return PolicyResponse(policy_text=policy)

# @app.get("/policies/")
# async def get_policies():
#     policies = get_all_policies()
#     return policies